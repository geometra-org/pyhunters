[tool.commitizen]
name = "cz_customize"
version_scheme = "pep440"
version = "1.0.0"
version_files = ["pyproject.toml:version"]
update_changelog_on_bump = true
pre_bump_hooks = ["pip install uv", "uv sync"]

[tool.commitizen.customize]
info_path = "cz_customize_info.md"

schema = "<optional-breaking><type>: <body>"
schema_pattern = "^(?:breaking\\|)?(feat|refactor|fix|tests|chore): (.*)"
example = "feature: this feature enables new functionality"

bump_pattern = "^(?:breaking\\|)?(feat|refactor|fix|tests|chore)"
bump_map = { "breaking" = "MAJOR", "feat" = "MINOR", "refactor" = "MINOR", "fix" = "PATCH", "tests" = "PATCH", "chore" = "PATCH" }
bump_message = "bump: version $current_version â†’ $new_version"

# run `uv run cz commit` and follow the prompts generated by `tool.commitizen.customize.questions`
message_template = "{% if breaking_change %}breaking|{% endif %}{{change_type}}: {{message}}"

commit_parser = "(?P<change_type>feature|refactor|bugfix|docs|chore|tests):\\s(?P<message>.*)?"
changelog_pattern = "(feat|refactor|fix|tests|chore)?"
change_type_map = { "feat" = "Feat", "refactor" = "Refactor", "fix" = "Fix", "tests" = "Tests", "chore" = "Chore" }
change_type_order = [
    "breaking", # highest priority
    "feat",
    "bugfix",
    "refactor",
    "chore",
    "tests",
]

[[tool.commitizen.customize.questions]]
type = "confirm"
name = "breaking_change"
message = "Does this commit include a breaking change?"

[[tool.commitizen.customize.questions]]
type = "list"
name = "change_type"
choices = [
    { value = "feat", name = "feat: A new feature." },
    { value = "fix", name = "fix: A bug fix." },
    { value = "refactor", name = "refactor: A code change that does not add or remove functionality." },
    { value = "chore", name = "chore: Something small and annoying." },
    { value = "tests", name = "tests: changes to tests." },
]
message = "Select the type of change you are committing"

[[tool.commitizen.customize.questions]]
type = "input"
name = "message"
message = "Body."
